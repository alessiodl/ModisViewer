{"dependencies":[{"name":"./Control.js","loc":{"line":17,"column":20}},{"name":"../css.js","loc":{"line":18,"column":64}},{"name":"../easing.js","loc":{"line":19,"column":24}},{"name":"../events/EventType.js","loc":{"line":20,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.render = render;\n\nvar _Control = require(\"./Control.js\");\n\nvar _Control2 = _interopRequireDefault(_Control);\n\nvar _css = require(\"../css.js\");\n\nvar _easing = require(\"../easing.js\");\n\nvar _EventType = require(\"../events/EventType.js\");\n\nvar _EventType2 = _interopRequireDefault(_EventType);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Rotate\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-rotate'] CSS class name.\n * @property {string|HTMLElement} [label='â‡§'] Text label to use for the rotate button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control should\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {function()} [resetNorth] Function called when the control is clicked.\n * This will override the default `resetNorth`.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n/**\n * @classdesc\n * A button control to reset rotation to 0.\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\n * selector is added to the button when the rotation is 0.\n *\n * @api\n */\nvar Rotate = /** @class */function (_super) {\n  __extends(Rotate, _super);\n  /**\n   * @param {Options=} opt_options Rotate options.\n   */\n  function Rotate(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    }) || this;\n    var className = options.className !== undefined ? options.className : 'ol-rotate';\n    var label = options.label !== undefined ? options.label : '\\u21E7';\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    _this.label_ = null;\n    if (typeof label === 'string') {\n      _this.label_ = document.createElement('span');\n      _this.label_.className = 'ol-compass';\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n      _this.label_.classList.add('ol-compass');\n    }\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';\n    var button = document.createElement('button');\n    button.className = className + '-reset';\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(_this.label_);\n    button.addEventListener(_EventType2.default.CLICK, _this.handleClick_.bind(_this), false);\n    var cssClasses = className + ' ' + _css.CLASS_UNSELECTABLE + ' ' + _css.CLASS_CONTROL;\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n    _this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.rotation_ = undefined;\n    if (_this.autoHide_) {\n      _this.element.classList.add(_css.CLASS_HIDDEN);\n    }\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  Rotate.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    if (this.callResetNorth_ !== undefined) {\n      this.callResetNorth_();\n    } else {\n      this.resetNorth_();\n    }\n  };\n  /**\n   * @private\n   */\n  Rotate.prototype.resetNorth_ = function () {\n    var map = this.getMap();\n    var view = map.getView();\n    if (!view) {\n      // the map does not have a view, so we can't act\n      // upon it\n      return;\n    }\n    if (view.getRotation() !== undefined) {\n      if (this.duration_ > 0) {\n        view.animate({\n          rotation: 0,\n          duration: this.duration_,\n          easing: _easing.easeOut\n        });\n      } else {\n        view.setRotation(0);\n      }\n    }\n  };\n  return Rotate;\n}(_Control2.default);\n/**\n * Update the rotate control element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {Rotate}\n * @api\n */\nfunction render(mapEvent) {\n  var frameState = mapEvent.frameState;\n  if (!frameState) {\n    return;\n  }\n  var rotation = frameState.viewState.rotation;\n  if (rotation != this.rotation_) {\n    var transform = 'rotate(' + rotation + 'rad)';\n    if (this.autoHide_) {\n      var contains = this.element.classList.contains(_css.CLASS_HIDDEN);\n      if (!contains && rotation === 0) {\n        this.element.classList.add(_css.CLASS_HIDDEN);\n      } else if (contains && rotation !== 0) {\n        this.element.classList.remove(_css.CLASS_HIDDEN);\n      }\n    }\n    this.label_.style.transform = transform;\n  }\n  this.rotation_ = rotation;\n}\nexports.default = Rotate;\n//# sourceMappingURL=Rotate.js.map"},"hash":"3c8398c8763a9fe78816bd134c886d54"}