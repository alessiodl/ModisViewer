{"dependencies":[{"name":"../css.js","loc":{"line":4,"column":34}},{"name":"../dom.js","loc":{"line":5,"column":38}},{"name":"../obj.js","loc":{"line":6,"column":22}},{"name":"../transform.js","loc":{"line":7,"column":42}},{"name":"./canvas/LabelCache.js","loc":{"line":8,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resetTransform = exports.measureTextHeight = exports.checkFont = exports.textHeights = exports.checkedFonts = exports.labelCache = exports.defaultLineWidth = exports.defaultPadding = exports.defaultTextBaseline = exports.defaultTextAlign = exports.defaultStrokeStyle = exports.defaultMiterLimit = exports.defaultLineJoin = exports.defaultLineDashOffset = exports.defaultLineDash = exports.defaultLineCap = exports.defaultFillStyle = exports.defaultFont = undefined;\nexports.measureTextWidth = measureTextWidth;\nexports.measureAndCacheTextWidth = measureAndCacheTextWidth;\nexports.measureTextWidths = measureTextWidths;\nexports.rotateAtOffset = rotateAtOffset;\nexports.drawImage = drawImage;\n\nvar _css = require(\"../css.js\");\n\nvar _dom = require(\"../dom.js\");\n\nvar _obj = require(\"../obj.js\");\n\nvar _transform = require(\"../transform.js\");\n\nvar _LabelCache = require(\"./canvas/LabelCache.js\");\n\nvar _LabelCache2 = _interopRequireDefault(_LabelCache);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle\n */\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle]\n * @property {CanvasLineCap} [currentLineCap]\n * @property {Array<number>} currentLineDash\n * @property {number} [currentLineDashOffset]\n * @property {CanvasLineJoin} [currentLineJoin]\n * @property {number} [currentLineWidth]\n * @property {number} [currentMiterLimit]\n * @property {number} [lastStroke]\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {CanvasLineCap} [lineCap]\n * @property {Array<number>} lineDash\n * @property {number} [lineDashOffset]\n * @property {CanvasLineJoin} [lineJoin]\n * @property {number} [lineWidth]\n * @property {number} [miterLimit]\n */\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {CanvasLineJoin} lineJoin\n * @property {number} lineWidth\n * @property {number} miterLimit\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle\n */\n/**\n * @typedef {Object} TextState\n * @property {string} font\n * @property {string} [textAlign]\n * @property {string} textBaseline\n * @property {string} [placement]\n * @property {number} [maxAngle]\n * @property {boolean} [overflow]\n * @property {import(\"../style/Fill.js\").default} [backgroundFill]\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke]\n * @property {number} [scale]\n * @property {Array<number>} [padding]\n */\n/**\n * Container for decluttered replay instructions that need to be rendered or\n * omitted together, i.e. when styles render both an image and text, or for the\n * characters that form text along lines. The basic elements of this array are\n * `[minX, minY, maxX, maxY, count]`, where the first four entries are the\n * rendered extent of the group in pixel space. `count` is the number of styles\n * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.\n * In addition to these four elements, declutter instruction arrays (i.e. the\n * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.\n * @typedef {Array<*>} DeclutterGroup\n */\n/**\n * Declutter groups for support of multi geometries.\n * @typedef {Array<DeclutterGroup>} DeclutterGroups\n */\n/**\n * @const\n * @type {string}\n */\nvar defaultFont = exports.defaultFont = '10px sans-serif';\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\n/**\n * @module ol/render/canvas\n */\nvar defaultFillStyle = exports.defaultFillStyle = '#000';\n/**\n * @const\n * @type {CanvasLineCap}\n */\nvar defaultLineCap = exports.defaultLineCap = 'round';\n/**\n * @const\n * @type {Array<number>}\n */\nvar defaultLineDash = exports.defaultLineDash = [];\n/**\n * @const\n * @type {number}\n */\nvar defaultLineDashOffset = exports.defaultLineDashOffset = 0;\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nvar defaultLineJoin = exports.defaultLineJoin = 'round';\n/**\n * @const\n * @type {number}\n */\nvar defaultMiterLimit = exports.defaultMiterLimit = 10;\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nvar defaultStrokeStyle = exports.defaultStrokeStyle = '#000';\n/**\n * @const\n * @type {string}\n */\nvar defaultTextAlign = exports.defaultTextAlign = 'center';\n/**\n * @const\n * @type {string}\n */\nvar defaultTextBaseline = exports.defaultTextBaseline = 'middle';\n/**\n * @const\n * @type {Array<number>}\n */\nvar defaultPadding = exports.defaultPadding = [0, 0, 0, 0];\n/**\n * @const\n * @type {number}\n */\nvar defaultLineWidth = exports.defaultLineWidth = 1;\n/**\n * The label cache for text rendering. To change the default cache size of 2048\n * entries, use {@link module:ol/structs/LRUCache#setSize}.\n * @type {LabelCache}\n * @api\n */\nvar labelCache = exports.labelCache = new _LabelCache2.default();\n/**\n * @type {!Object<string, number>}\n */\nvar checkedFonts = exports.checkedFonts = {};\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar measureContext = null;\n/**\n * @type {string}\n */\nvar measureFont;\n/**\n * @type {!Object<string, number>}\n */\nvar textHeights = exports.textHeights = {};\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nvar checkFont = exports.checkFont = function () {\n  var retries = 100;\n  var checked = checkedFonts;\n  var size = '32px ';\n  var referenceFonts = ['monospace', 'serif'];\n  var len = referenceFonts.length;\n  var text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  var interval, referenceWidth;\n  /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    var context = getMeasureContext();\n    var available = true;\n    for (var i = 0; i < len; ++i) {\n      var referenceFont = referenceFonts[i];\n      context.font = fontStyle + ' ' + fontWeight + ' ' + size + referenceFont;\n      referenceWidth = context.measureText(text).width;\n      if (fontFamily != referenceFont) {\n        context.font = fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont;\n        var width = context.measureText(text).width;\n        // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n        available = available && width != referenceWidth;\n      }\n    }\n    if (available) {\n      return true;\n    }\n    return false;\n  }\n  function check() {\n    var done = true;\n    for (var font in checked) {\n      if (checked[font] < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          checked[font] = retries;\n          (0, _obj.clear)(textHeights);\n          // Make sure that loaded fonts are picked up by Safari\n          measureContext = null;\n          measureFont = undefined;\n          if (labelCache.getCount()) {\n            labelCache.clear();\n          }\n        } else {\n          ++checked[font];\n          done = false;\n        }\n      }\n    }\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n  return function (fontSpec) {\n    var font = (0, _css.getFontParameters)(fontSpec);\n    if (!font) {\n      return;\n    }\n    var families = font.families;\n    for (var i = 0, ii = families.length; i < ii; ++i) {\n      var family = families[i];\n      var key = font.style + '\\n' + font.weight + '\\n' + family;\n      if (!(key in checked)) {\n        checked[key] = retries;\n        if (!isAvailable(font.style, font.weight, family)) {\n          checked[key] = 0;\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n}();\n/**\n * @return {CanvasRenderingContext2D} Measure context.\n */\nfunction getMeasureContext() {\n  if (!measureContext) {\n    measureContext = (0, _dom.createCanvasContext2D)(1, 1);\n  }\n  return measureContext;\n}\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nvar measureTextHeight = exports.measureTextHeight = function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  var div;\n  var heights = textHeights;\n  return function (font) {\n    var height = heights[font];\n    if (height == undefined) {\n      if (!div) {\n        div = document.createElement('div');\n        div.innerHTML = 'M';\n        div.style.margin = '0 !important';\n        div.style.padding = '0 !important';\n        div.style.position = 'absolute !important';\n        div.style.left = '-99999px !important';\n      }\n      div.style.font = font;\n      document.body.appendChild(div);\n      height = div.offsetHeight;\n      heights[font] = height;\n      document.body.removeChild(div);\n    }\n    return height;\n  };\n}();\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nfunction measureTextWidth(font, text) {\n  var measureContext = getMeasureContext();\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text).width;\n}\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @returns {number} The text width.\n */\nfunction measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  var width = measureTextWidth(font, text);\n  cache[text] = width;\n  return width;\n}\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array<string>} lines Lines to measure.\n * @param {Array<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\nfunction measureTextWidths(font, lines, widths) {\n  var numLines = lines.length;\n  var width = 0;\n  for (var i = 0; i < numLines; ++i) {\n    var currentWidth = measureTextWidth(font, lines[i]);\n    width = Math.max(width, currentWidth);\n    widths.push(currentWidth);\n  }\n  return width;\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nfunction rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\nvar resetTransform = exports.resetTransform = (0, _transform.create)();\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} scale Scale.\n */\nfunction drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale) {\n  var alpha;\n  if (opacity != 1) {\n    alpha = context.globalAlpha;\n    context.globalAlpha = alpha * opacity;\n  }\n  if (transform) {\n    context.setTransform.apply(context, transform);\n  }\n  context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);\n  if (opacity != 1) {\n    context.globalAlpha = alpha;\n  }\n  if (transform) {\n    context.setTransform.apply(context, resetTransform);\n  }\n}\n//# sourceMappingURL=canvas.js.map"},"hash":"3d369941f3c58a0f1ecd60de761aa670"}