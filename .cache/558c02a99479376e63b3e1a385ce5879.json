{"dependencies":[{"name":"../units/aliases","loc":{"line":1,"column":31}},{"name":"../utils/hooks","loc":{"line":2,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startOf = startOf;\nexports.endOf = endOf;\n\nvar _aliases = require(\"../units/aliases\");\n\nvar _hooks = require(\"../utils/hooks\");\n\nvar MS_PER_SECOND = 1000;\nvar MS_PER_MINUTE = 60 * MS_PER_SECOND;\nvar MS_PER_HOUR = 60 * MS_PER_MINUTE;\nvar MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n// actual modulo - handles negative numbers (for dates before 1970):\nfunction mod(dividend, divisor) {\n  return (dividend % divisor + divisor) % divisor;\n}\n\nfunction localStartOfDate(y, m, d) {\n  // the date constructor remaps years 0-99 to 1900-1999\n  if (y < 100 && y >= 0) {\n    // preserve leap years using a full 400 year cycle, then reset\n    return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n  } else {\n    return new Date(y, m, d).valueOf();\n  }\n}\n\nfunction utcStartOfDate(y, m, d) {\n  // Date.UTC remaps years 0-99 to 1900-1999\n  if (y < 100 && y >= 0) {\n    // preserve leap years using a full 400 year cycle, then reset\n    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n  } else {\n    return Date.UTC(y, m, d);\n  }\n}\n\nfunction startOf(units) {\n  var time;\n  units = (0, _aliases.normalizeUnits)(units);\n  if (units === undefined || units === 'millisecond' || !this.isValid()) {\n    return this;\n  }\n\n  var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n  switch (units) {\n    case 'year':\n      time = startOfDate(this.year(), 0, 1);\n      break;\n    case 'quarter':\n      time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n      break;\n    case 'month':\n      time = startOfDate(this.year(), this.month(), 1);\n      break;\n    case 'week':\n      time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n      break;\n    case 'isoWeek':\n      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n      break;\n    case 'day':\n    case 'date':\n      time = startOfDate(this.year(), this.month(), this.date());\n      break;\n    case 'hour':\n      time = this._d.valueOf();\n      time -= mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n      break;\n    case 'minute':\n      time = this._d.valueOf();\n      time -= mod(time, MS_PER_MINUTE);\n      break;\n    case 'second':\n      time = this._d.valueOf();\n      time -= mod(time, MS_PER_SECOND);\n      break;\n  }\n\n  this._d.setTime(time);\n  _hooks.hooks.updateOffset(this, true);\n  return this;\n}\n\nfunction endOf(units) {\n  var time;\n  units = (0, _aliases.normalizeUnits)(units);\n  if (units === undefined || units === 'millisecond' || !this.isValid()) {\n    return this;\n  }\n\n  var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n  switch (units) {\n    case 'year':\n      time = startOfDate(this.year() + 1, 0, 1) - 1;\n      break;\n    case 'quarter':\n      time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n      break;\n    case 'month':\n      time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n      break;\n    case 'week':\n      time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n      break;\n    case 'isoWeek':\n      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n      break;\n    case 'day':\n    case 'date':\n      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n      break;\n    case 'hour':\n      time = this._d.valueOf();\n      time += MS_PER_HOUR - mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n      break;\n    case 'minute':\n      time = this._d.valueOf();\n      time += MS_PER_MINUTE - mod(time, MS_PER_MINUTE) - 1;\n      break;\n    case 'second':\n      time = this._d.valueOf();\n      time += MS_PER_SECOND - mod(time, MS_PER_SECOND) - 1;\n      break;\n  }\n\n  this._d.setTime(time);\n  _hooks.hooks.updateOffset(this, true);\n  return this;\n}"},"hash":"ee4cc8a4cbcedf451b17c34aa25df7a5"}