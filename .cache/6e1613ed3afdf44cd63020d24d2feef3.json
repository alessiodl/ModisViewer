{"dependencies":[{"name":"../functions.js","loc":{"line":18,"column":21}},{"name":"../events.js","loc":{"line":19,"column":38}},{"name":"../events/Event.js","loc":{"line":20,"column":18}},{"name":"../events/EventType.js","loc":{"line":21,"column":22}},{"name":"./Interaction.js","loc":{"line":22,"column":24}},{"name":"../proj.js","loc":{"line":23,"column":37}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _functions = require(\"../functions.js\");\n\nvar _events = require(\"../events.js\");\n\nvar _Event = require(\"../events/Event.js\");\n\nvar _Event2 = _interopRequireDefault(_Event);\n\nvar _EventType = require(\"../events/EventType.js\");\n\nvar _EventType2 = _interopRequireDefault(_EventType);\n\nvar _Interaction = require(\"./Interaction.js\");\n\nvar _Interaction2 = _interopRequireDefault(_Interaction);\n\nvar _proj = require(\"../proj.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n/**\n * @enum {string}\n */\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nvar DragAndDropEvent = /** @class */function (_super) {\n  __extends(DragAndDropEvent, _super);\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>=} opt_features Features.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   */\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    _this.features = opt_features;\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    _this.file = file;\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    _this.projection = opt_projection;\n    return _this;\n  }\n  return DragAndDropEvent;\n}(_Event2.default);\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\nvar DragAndDrop = /** @class */function (_super) {\n  __extends(DragAndDrop, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function DragAndDrop(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      handleEvent: _functions.TRUE\n    }) || this;\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n    _this.formatConstructors_ = options.formatConstructors ? options.formatConstructors : [];\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.projection_ = options.projection ? (0, _proj.get)(options.projection) : null;\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.dropListenKeys_ = null;\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    _this.source_ = options.source || null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.target = options.target ? options.target : null;\n    return _this;\n  }\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  DragAndDrop.prototype.handleResult_ = function (file, event) {\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n    var formatConstructors = this.formatConstructors_;\n    var features = [];\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      var format = new formatConstructors[i]();\n      features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n    this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n  };\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.registerListeners_ = function () {\n    var map = this.getMap();\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [(0, _events.listen)(dropArea, _EventType2.default.DROP, handleDrop, this), (0, _events.listen)(dropArea, _EventType2.default.DRAGENTER, handleStop, this), (0, _events.listen)(dropArea, _EventType2.default.DRAGOVER, handleStop, this), (0, _events.listen)(dropArea, _EventType2.default.DROP, handleStop, this)];\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  DragAndDrop.prototype.setActive = function (active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * @inheritDoc\n   */\n  DragAndDrop.prototype.setMap = function (map) {\n    this.unregisterListeners_();\n    _super.prototype.setMap.call(this, map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  DragAndDrop.prototype.tryReadFeatures_ = function (format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.unregisterListeners_ = function () {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(_events.unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n  return DragAndDrop;\n}(_Interaction2.default);\n/**\n * @param {DragEvent} event Event.\n * @this {DragAndDrop}\n */\nfunction handleDrop(event) {\n  var files = event.dataTransfer.files;\n  for (var i = 0, ii = files.length; i < ii; ++i) {\n    var file = files.item(i);\n    var reader = new FileReader();\n    reader.addEventListener(_EventType2.default.LOAD, this.handleResult_.bind(this, file));\n    reader.readAsText(file);\n  }\n}\n/**\n * @param {DragEvent} event Event.\n */\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\nexports.default = DragAndDrop;\n//# sourceMappingURL=DragAndDrop.js.map"},"hash":"b9362e712765a1552937c6698be37223"}