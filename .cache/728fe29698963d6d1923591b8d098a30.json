{"dependencies":[{"name":"../PluggableMap.js","loc":{"line":17,"column":25}},{"name":"../renderer/Composite.js","loc":{"line":18,"column":33}},{"name":"../MapEventType.js","loc":{"line":19,"column":25}},{"name":"../MapProperty.js","loc":{"line":20,"column":24}},{"name":"../Object.js","loc":{"line":21,"column":35}},{"name":"../ObjectEventType.js","loc":{"line":22,"column":28}},{"name":"../Overlay.js","loc":{"line":23,"column":20}},{"name":"../OverlayPositioning.js","loc":{"line":24,"column":31}},{"name":"../ViewProperty.js","loc":{"line":25,"column":25}},{"name":"./Control.js","loc":{"line":26,"column":20}},{"name":"../geom/Polygon.js","loc":{"line":27,"column":48}},{"name":"../css.js","loc":{"line":28,"column":67}},{"name":"../dom.js","loc":{"line":29,"column":28}},{"name":"../events.js","loc":{"line":30,"column":35}},{"name":"../events/EventType.js","loc":{"line":31,"column":22}},{"name":"../extent.js","loc":{"line":32,"column":100}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.render = render;\n\nvar _PluggableMap = require(\"../PluggableMap.js\");\n\nvar _PluggableMap2 = _interopRequireDefault(_PluggableMap);\n\nvar _Composite = require(\"../renderer/Composite.js\");\n\nvar _Composite2 = _interopRequireDefault(_Composite);\n\nvar _MapEventType = require(\"../MapEventType.js\");\n\nvar _MapEventType2 = _interopRequireDefault(_MapEventType);\n\nvar _MapProperty = require(\"../MapProperty.js\");\n\nvar _MapProperty2 = _interopRequireDefault(_MapProperty);\n\nvar _Object = require(\"../Object.js\");\n\nvar _ObjectEventType = require(\"../ObjectEventType.js\");\n\nvar _ObjectEventType2 = _interopRequireDefault(_ObjectEventType);\n\nvar _Overlay = require(\"../Overlay.js\");\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nvar _OverlayPositioning = require(\"../OverlayPositioning.js\");\n\nvar _OverlayPositioning2 = _interopRequireDefault(_OverlayPositioning);\n\nvar _ViewProperty = require(\"../ViewProperty.js\");\n\nvar _ViewProperty2 = _interopRequireDefault(_ViewProperty);\n\nvar _Control = require(\"./Control.js\");\n\nvar _Control2 = _interopRequireDefault(_Control);\n\nvar _Polygon = require(\"../geom/Polygon.js\");\n\nvar _css = require(\"../css.js\");\n\nvar _dom = require(\"../dom.js\");\n\nvar _events = require(\"../events.js\");\n\nvar _EventType = require(\"../events/EventType.js\");\n\nvar _EventType2 = _interopRequireDefault(_EventType);\n\nvar _extent = require(\"../extent.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/OverviewMap\n */\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */function (_super) {\n  __extends(ControlledMap, _super);\n  function ControlledMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ControlledMap.prototype.createRenderer = function () {\n    return new _Composite2.default(this);\n  };\n  return ControlledMap;\n}(_PluggableMap2.default);\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Layer.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Layer.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {import(\"../View.js\").default} [view] Custom view for the overview map. If not provided,\n * a default view with an EPSG:3857 projection will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */function (_super) {\n  __extends(OverviewMap, _super);\n  /**\n   * @param {Options=} opt_options OverviewMap options.\n   */\n  function OverviewMap(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     */\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00AB';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : '\\u00BB';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(_EventType2.default.CLICK, _this.handleClick_.bind(_this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n    _this.ovmap_ = new ControlledMap({\n      view: options.view\n    });\n    var ovmap = _this.ovmap_;\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    _this.boxOverlay_ = new _Overlay2.default({\n      position: [0, 0],\n      positioning: _OverlayPositioning2.default.CENTER_CENTER,\n      element: box\n    });\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n    var cssClasses = className + ' ' + _css.CLASS_UNSELECTABLE + ' ' + _css.CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + _css.CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n    var overlayBox = _this.boxOverlay_.getElement();\n    /* Functions definition */\n    var computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n    var move = function (event) {\n      var position = /** @type {?} */computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal( /** @type {Event} */position);\n      overlay.setPosition(coordinates);\n    };\n    var endMoving = function (event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   * @api\n   */\n  OverviewMap.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      var oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push((0, _events.listen)(map, _ObjectEventType2.default.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      var view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n    if (event.key === _MapProperty2.default.VIEW) {\n      var oldView = /** @type {import(\"../View.js\").default} */event.oldValue;\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  OverviewMap.prototype.bindView_ = function (view) {\n    view.addEventListener((0, _Object.getChangeEventType)(_ViewProperty2.default.ROTATION), this.boundHandleRotationChanged_);\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  OverviewMap.prototype.unbindView_ = function (view) {\n    view.removeEventListener((0, _Object.getChangeEventType)(_ViewProperty2.default.ROTATION), this.boundHandleRotationChanged_);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  OverviewMap.prototype.handleRotationChanged_ = function () {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  OverviewMap.prototype.validateExtent_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    if (this.viewExtent_ && (0, _extent.equals)(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n    var ovmapSize = /** @type {import(\"../size.js\").Size} */ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtentInternal(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinateInternal((0, _extent.getTopLeft)(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinateInternal((0, _extent.getBottomRight)(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!(0, _extent.containsExtent)(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  OverviewMap.prototype.resetExtent_ = function () {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    var ovview = ovmap.getView();\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    (0, _extent.scaleFromCenter)(extent, ratio);\n    ovview.fitInternal((0, _Polygon.fromExtent)(extent));\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  OverviewMap.prototype.recenter_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  OverviewMap.prototype.updateBox_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var center = view.getCenterInternal();\n    var resolution = view.getResolution();\n    var ovresolution = ovview.getResolution();\n    var width = mapSize[0] * resolution / ovresolution;\n    var height = mapSize[1] * resolution / ovresolution;\n    // set position using center coordinates\n    overlay.setPosition(center);\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      var transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  OverviewMap.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n  OverviewMap.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(_css.CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      (0, _dom.replaceNode)(this.collapseLabel_, this.label_);\n    } else {\n      (0, _dom.replaceNode)(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    var ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      (0, _events.listenOnce)(ovmap, _MapEventType2.default.POSTRENDER, function (event) {\n        this.updateBox_();\n      }, this);\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  OverviewMap.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  OverviewMap.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  OverviewMap.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  OverviewMap.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  OverviewMap.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n  OverviewMap.prototype.getOverviewMap = function () {\n    return this.ovmap_;\n  };\n  return OverviewMap;\n}(_Control2.default);\n/**\n * Update the overview map element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {OverviewMap}\n * @api\n */\nfunction render(mapEvent) {\n  this.validateExtent_();\n  this.updateBox_();\n}\nexports.default = OverviewMap;\n//# sourceMappingURL=OverviewMap.js.map"},"hash":"bd7e71930f1ec7c6cb95fa56037314e8"}