{"dependencies":[{"name":"./PluggableMap.js","loc":{"line":17,"column":25}},{"name":"./control.js","loc":{"line":18,"column":44}},{"name":"./interaction.js","loc":{"line":19,"column":48}},{"name":"./obj.js","loc":{"line":20,"column":23}},{"name":"./renderer/Composite.js","loc":{"line":21,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _PluggableMap = require(\"./PluggableMap.js\");\n\nvar _PluggableMap2 = _interopRequireDefault(_PluggableMap);\n\nvar _control = require(\"./control.js\");\n\nvar _interaction = require(\"./interaction.js\");\n\nvar _obj = require(\"./obj.js\");\n\nvar _Composite = require(\"./renderer/Composite.js\");\n\nvar _Composite2 = _interopRequireDefault(_Composite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Map\n */\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map';\n *     import View from 'ol/View';\n *     import TileLayer from 'ol/layer/Tile';\n *     import OSM from 'ol/source/OSM';\n *\n *     var map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM()\n *         })\n *       ],\n *       target: 'map'\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}\n * is a subclass of {@link module:ol/layer/Base}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @api\n */\nvar Map = /** @class */function (_super) {\n  __extends(Map, _super);\n  /**\n   * @param {import(\"./PluggableMap.js\").MapOptions} options Map options.\n   */\n  function Map(options) {\n    var _this = this;\n    options = (0, _obj.assign)({}, options);\n    if (!options.controls) {\n      options.controls = (0, _control.defaults)();\n    }\n    if (!options.interactions) {\n      options.interactions = (0, _interaction.defaults)();\n    }\n    _this = _super.call(this, options) || this;\n    return _this;\n  }\n  Map.prototype.createRenderer = function () {\n    return new _Composite2.default(this);\n  };\n  return Map;\n}(_PluggableMap2.default);\nexports.default = Map;\n//# sourceMappingURL=Map.js.map"},"hash":"a90536f85fc6556bd807e7c282422787"}