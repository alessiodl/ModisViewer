{"dependencies":[{"name":"../ImageCanvas.js","loc":{"line":17,"column":24}},{"name":"../TileQueue.js","loc":{"line":18,"column":22}},{"name":"../dom.js","loc":{"line":19,"column":38}},{"name":"../events/Event.js","loc":{"line":20,"column":18}},{"name":"../events/EventType.js","loc":{"line":21,"column":22}},{"name":"pixelworks/lib/index.js","loc":{"line":22,"column":26}},{"name":"../extent.js","loc":{"line":23,"column":55}},{"name":"../layer/Image.js","loc":{"line":24,"column":23}},{"name":"../layer/Tile.js","loc":{"line":25,"column":22}},{"name":"../obj.js","loc":{"line":26,"column":23}},{"name":"../transform.js","loc":{"line":27,"column":42}},{"name":"./Image.js","loc":{"line":28,"column":24}},{"name":"./Tile.js","loc":{"line":29,"column":23}},{"name":"./State.js","loc":{"line":30,"column":24}},{"name":"./Source.js","loc":{"line":31,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RasterSourceEvent = undefined;\n\nvar _ImageCanvas = require(\"../ImageCanvas.js\");\n\nvar _ImageCanvas2 = _interopRequireDefault(_ImageCanvas);\n\nvar _TileQueue = require(\"../TileQueue.js\");\n\nvar _TileQueue2 = _interopRequireDefault(_TileQueue);\n\nvar _dom = require(\"../dom.js\");\n\nvar _Event = require(\"../events/Event.js\");\n\nvar _Event2 = _interopRequireDefault(_Event);\n\nvar _EventType = require(\"../events/EventType.js\");\n\nvar _EventType2 = _interopRequireDefault(_EventType);\n\nvar _index = require(\"pixelworks/lib/index.js\");\n\nvar _extent = require(\"../extent.js\");\n\nvar _Image = require(\"../layer/Image.js\");\n\nvar _Image2 = _interopRequireDefault(_Image);\n\nvar _Tile = require(\"../layer/Tile.js\");\n\nvar _Tile2 = _interopRequireDefault(_Tile);\n\nvar _obj = require(\"../obj.js\");\n\nvar _transform = require(\"../transform.js\");\n\nvar _Image3 = require(\"./Image.js\");\n\nvar _Image4 = _interopRequireDefault(_Image3);\n\nvar _Tile3 = require(\"./Tile.js\");\n\nvar _Tile4 = _interopRequireDefault(_Tile3);\n\nvar _State = require(\"./State.js\");\n\nvar _State2 = _interopRequireDefault(_State);\n\nvar _Source = require(\"./Source.js\");\n\nvar _Source2 = _interopRequireDefault(_Source);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Raster\n */\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\n * and should return a single {@link ImageData\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n/**\n * @enum {string}\n */\nvar RasterEventType = {\n  /**\n   * Triggered before operations are run.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n  /**\n   * Triggered after operations are run.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\nvar RasterOperationType = {\n  PIXEL: 'pixel',\n  IMAGE: 'image'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\n * type.\n */\nvar RasterSourceEvent = /** @class */function (_super) {\n  __extends(RasterSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Object} data An object made available to operations.\n   */\n  function RasterSourceEvent(type, frameState, data) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    _this.extent = frameState.extent;\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    _this.data = data;\n    return _this;\n  }\n  return RasterSourceEvent;\n}(_Event2.default);\nexports.RasterSourceEvent = RasterSourceEvent;\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\n\nvar RasterSource = /** @class */function (_super) {\n  __extends(RasterSource, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function RasterSource(options) {\n    var _this = _super.call(this, {\n      projection: null\n    }) || this;\n    /**\n     * @private\n     * @type {*}\n     */\n    _this.worker_ = null;\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    _this.operationType_ = options.operationType !== undefined ? options.operationType : RasterOperationType.PIXEL;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.threads_ = options.threads !== undefined ? options.threads : 1;\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n    _this.layers_ = createLayers(options.sources);\n    var changed = _this.changed.bind(_this);\n    for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n      _this.layers_[i].addEventListener(_EventType2.default.CHANGE, changed);\n    }\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    _this.tileQueue_ = new _TileQueue2.default(function () {\n      return 1;\n    }, _this.changed.bind(_this));\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     * @private\n     */\n    _this.requestedFrameState_;\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    _this.renderedImageCanvas_ = null;\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n    _this.renderedRevision_;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     */\n    _this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: (0, _transform.create)(),\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(_this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: (0, _transform.create)(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: _this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: /** @type {import(\"../View.js\").State} */{\n        rotation: 0\n      },\n      viewHints: [],\n      wantedTiles: {},\n      declutterItems: []\n    };\n    _this.setAttributions(function (frameState) {\n      var attributions = [];\n      for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        var sourceOrLayer = options.sources[index];\n        var source = sourceOrLayer instanceof _Source2.default ? sourceOrLayer : sourceOrLayer.getSource();\n        var attributionGetter = source.getAttributions();\n        if (typeof attributionGetter === 'function') {\n          var sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n      return attributions.length !== 0 ? attributions : null;\n    });\n    if (options.operation !== undefined) {\n      _this.setOperation(options.operation, options.lib);\n    }\n    return _this;\n  }\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object=} opt_lib Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  RasterSource.prototype.setOperation = function (operation, opt_lib) {\n    this.worker_ = new _index.Processor({\n      operation: operation,\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\n      queue: 1,\n      lib: opt_lib,\n      threads: this.threads_\n    });\n    this.changed();\n  };\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n   * @private\n   */\n  RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n    var frameState = /** @type {import(\"../PluggableMap.js\").FrameState} */(0, _obj.assign)({}, this.frameState_);\n    frameState.viewState = /** @type {import(\"../View.js\").State} */(0, _obj.assign)({}, frameState.viewState);\n    var center = (0, _extent.getCenter)(extent);\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round((0, _extent.getWidth)(extent) / resolution);\n    frameState.size[1] = Math.round((0, _extent.getHeight)(extent) / resolution);\n    frameState.time = Infinity;\n    var viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  };\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  RasterSource.prototype.allSourcesReady_ = function () {\n    var ready = true;\n    var source;\n    for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n      if (source.getState() !== _State2.default.READY) {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  };\n  /**\n   * @inheritDoc\n   */\n  RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n    var frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      var renderedResolution = this.renderedImageCanvas_.getResolution();\n      var renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (resolution !== renderedResolution || !(0, _extent.equals)(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n    frameState.tileQueue.loadMoreTiles(16, 16);\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n    return this.renderedImageCanvas_;\n  };\n  /**\n   * Start processing source data.\n   * @private\n   */\n  RasterSource.prototype.processSources_ = function () {\n    var frameState = this.requestedFrameState_;\n    var len = this.layers_.length;\n    var imageDatas = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      var imageData = getImageData(this.layers_[i], frameState);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n    var data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  };\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object} data The user data.\n   * @private\n   */\n  RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n    // do nothing if extent or resolution changed\n    var extent = frameState.extent;\n    var resolution = frameState.viewState.resolution;\n    if (resolution !== this.requestedFrameState_.viewState.resolution || !(0, _extent.equals)(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n    var context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      var width = Math.round((0, _extent.getWidth)(extent) / resolution);\n      var height = Math.round((0, _extent.getHeight)(extent) / resolution);\n      context = (0, _dom.createCanvasContext2D)(width, height);\n      this.renderedImageCanvas_ = new _ImageCanvas2.default(extent, resolution, 1, context.canvas);\n    }\n    context.putImageData(output, 0, 0);\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n  };\n  /**\n   * @override\n   */\n  RasterSource.prototype.getImageInternal = function () {\n    return null; // not implemented\n  };\n  return RasterSource;\n}(_Image4.default);\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(layer, frameState) {\n  var renderer = layer.getRenderer();\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n  var width = frameState.size[0];\n  var height = frameState.size[1];\n  var container = renderer.renderFrame(frameState, null);\n  var element;\n  if (container) {\n    element = container.firstElementChild;\n  }\n  if (!(element instanceof HTMLCanvasElement)) {\n    throw new Error('Unsupported rendered element: ' + element);\n  }\n  if (element.width === width && element.height === height) {\n    var context = element.getContext('2d');\n    return context.getImageData(0, 0, width, height);\n  }\n  if (!sharedContext) {\n    sharedContext = (0, _dom.createCanvasContext2D)(width, height);\n  } else {\n    var canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = (0, _dom.createCanvasContext2D)(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\nfunction createLayers(sources) {\n  var len = sources.length;\n  var layers = new Array(len);\n  for (var i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n  return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  var layer;\n  if (layerOrSource instanceof _Source2.default) {\n    if (layerOrSource instanceof _Tile4.default) {\n      layer = new _Tile2.default({ source: layerOrSource });\n    } else if (layerOrSource instanceof _Image4.default) {\n      layer = new _Image2.default({ source: layerOrSource });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n  return layer;\n}\nexports.default = RasterSource;\n//# sourceMappingURL=Raster.js.map"},"hash":"5fd7b60a1f3a7d41fec1cfb953de3d65"}