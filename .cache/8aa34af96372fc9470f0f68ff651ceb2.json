{"dependencies":[{"name":"../events/condition.js","loc":{"line":17,"column":40}},{"name":"./Pointer.js","loc":{"line":18,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _condition = require(\"../events/condition.js\");\n\nvar _Pointer = require(\"./Pointer.js\");\n\nvar _Pointer2 = _interopRequireDefault(_Pointer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragRotateAndZoom\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~shiftKeyOnly}.\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n/**\n * @classdesc\n * Allows the user to zoom and rotate the map by clicking and dragging\n * on the map.  By default, this interaction is limited to when the shift\n * key is held down.\n *\n * This interaction is only supported for mouse devices.\n *\n * And this interaction is not included in the default interactions.\n * @api\n */\nvar DragRotateAndZoom = /** @class */function (_super) {\n  __extends(DragRotateAndZoom, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function DragRotateAndZoom(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */options) || this;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : _condition.shiftKeyOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastMagnitude_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.lastScaleDelta_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 400;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n  DragRotateAndZoom.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!(0, _condition.mouseOnly)(mapBrowserEvent)) {\n      return;\n    }\n    var map = mapBrowserEvent.map;\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var deltaX = offset[0] - size[0] / 2;\n    var deltaY = size[1] / 2 - offset[1];\n    var theta = Math.atan2(deltaY, deltaX);\n    var magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    var view = map.getView();\n    if (this.lastAngle_ !== undefined) {\n      var angleDelta = this.lastAngle_ - theta;\n      view.adjustRotationInternal(angleDelta);\n    }\n    this.lastAngle_ = theta;\n    if (this.lastMagnitude_ !== undefined) {\n      view.adjustResolutionInternal(this.lastMagnitude_ / magnitude);\n    }\n    if (this.lastMagnitude_ !== undefined) {\n      this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;\n    }\n    this.lastMagnitude_ = magnitude;\n  };\n  /**\n   * @inheritDoc\n   */\n  DragRotateAndZoom.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (!(0, _condition.mouseOnly)(mapBrowserEvent)) {\n      return true;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    var direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n    view.endInteraction(this.duration_, direction);\n    this.lastScaleDelta_ = 0;\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n  DragRotateAndZoom.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (!(0, _condition.mouseOnly)(mapBrowserEvent)) {\n      return false;\n    }\n    if (this.condition_(mapBrowserEvent)) {\n      mapBrowserEvent.map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      this.lastMagnitude_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragRotateAndZoom;\n}(_Pointer2.default);\nexports.default = DragRotateAndZoom;\n//# sourceMappingURL=DragRotateAndZoom.js.map"},"hash":"88c89ef2df960b47e2c5dbe462c1390c"}