{"dependencies":[{"name":"../../util.js","loc":{"line":17,"column":23}},{"name":"../../ViewHint.js","loc":{"line":18,"column":21}},{"name":"../../extent.js","loc":{"line":19,"column":94}},{"name":"../../proj.js","loc":{"line":20,"column":93}},{"name":"../../render/canvas/BuilderGroup.js","loc":{"line":21,"column":31}},{"name":"../../render/canvas/ExecutorGroup.js","loc":{"line":22,"column":47}},{"name":"./Layer.js","loc":{"line":23,"column":32}},{"name":"../vector.js","loc":{"line":24,"column":152}},{"name":"../../transform.js","loc":{"line":25,"column":77}},{"name":"../../render/canvas/hitdetect.js","loc":{"line":26,"column":55}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require(\"../../util.js\");\n\nvar _ViewHint = require(\"../../ViewHint.js\");\n\nvar _ViewHint2 = _interopRequireDefault(_ViewHint);\n\nvar _extent = require(\"../../extent.js\");\n\nvar _proj = require(\"../../proj.js\");\n\nvar _BuilderGroup = require(\"../../render/canvas/BuilderGroup.js\");\n\nvar _BuilderGroup2 = _interopRequireDefault(_BuilderGroup);\n\nvar _ExecutorGroup = require(\"../../render/canvas/ExecutorGroup.js\");\n\nvar _ExecutorGroup2 = _interopRequireDefault(_ExecutorGroup);\n\nvar _Layer = require(\"./Layer.js\");\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _vector = require(\"../vector.js\");\n\nvar _transform = require(\"../../transform.js\");\n\nvar _hitdetect = require(\"../../render/canvas/hitdetect.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasVectorLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this = _super.call(this, vectorLayer) || this;\n    /** @private */\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n    /**\n     * @type {boolean}\n     */\n    _this.animatingOrInteracting_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.dirty_ = false;\n    /**\n     * @type {ImageData}\n     */\n    _this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    _this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = (0, _extent.createEmpty)();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    _this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    _this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    _this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    _this.replayGroupChanged = true;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n    if (opacity < 1) {\n      target = null;\n    }\n    _super.prototype.useContainer.call(this, target, transform, opacity);\n  };\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var pixelRatio = frameState.pixelRatio;\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    // set forward and inverse pixel transforms\n    (0, _transform.makeScale)(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    (0, _transform.makeInverse)(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = (0, _transform.toString)(this.pixelTransform);\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    var context = this.context;\n    var canvas = context.canvas;\n    var replayGroup = this.replayGroup_;\n    if (!replayGroup || replayGroup.isEmpty()) {\n      if (!this.containerReused && canvas.width > 0) {\n        canvas.width = 0;\n      }\n      return this.container;\n    }\n    // resize and clear\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    this.preRender(context, frameState);\n    var extent = frameState.extent;\n    var viewState = frameState.viewState;\n    var center = viewState.center;\n    var resolution = viewState.resolution;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = this.getLayer().getSource();\n    // clipped rendering if layer extent is set\n    var clipped = false;\n    if (layerState.extent) {\n      var layerExtent = (0, _proj.fromUserExtent)(layerState.extent, projection);\n      clipped = !(0, _extent.containsExtent)(layerExtent, frameState.extent) && (0, _extent.intersects)(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clip(context, frameState, layerExtent);\n      }\n    }\n    var viewHints = frameState.viewHints;\n    var snapToPixel = !(viewHints[_ViewHint2.default.ANIMATING] || viewHints[_ViewHint2.default.INTERACTING]);\n    var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, 0);\n    var declutterReplays = this.getLayer().getDeclutter() ? {} : null;\n    replayGroup.execute(context, transform, rotation, snapToPixel, undefined, declutterReplays);\n    if (vectorSource.getWrapX() && projection.canWrapX() && !(0, _extent.containsExtent)(projectionExtent, extent)) {\n      var startX = extent[0];\n      var worldWidth = (0, _extent.getWidth)(projectionExtent);\n      var world = 0;\n      var offsetX = void 0;\n      while (startX < projectionExtent[0]) {\n        --world;\n        offsetX = worldWidth * world;\n        var transform_1 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);\n        replayGroup.execute(context, transform_1, rotation, snapToPixel, undefined, declutterReplays);\n        startX += worldWidth;\n      }\n      world = 0;\n      startX = extent[2];\n      while (startX > projectionExtent[2]) {\n        ++world;\n        offsetX = worldWidth * world;\n        var transform_2 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);\n        replayGroup.execute(context, transform_2, rotation, snapToPixel, undefined, declutterReplays);\n        startX -= worldWidth;\n      }\n    }\n    if (declutterReplays) {\n      var viewHints_1 = frameState.viewHints;\n      var hifi = !(viewHints_1[_ViewHint2.default.ANIMATING] || viewHints_1[_ViewHint2.default.INTERACTING]);\n      (0, _ExecutorGroup.replayDeclutter)(declutterReplays, context, rotation, 1, hifi, frameState.declutterItems);\n    }\n    if (clipped) {\n      context.restore();\n    }\n    this.postRender(context, frameState);\n    var opacity = layerState.opacity;\n    var container = this.container;\n    if (opacity !== parseFloat(container.style.opacity)) {\n      container.style.opacity = opacity === 1 ? '' : opacity;\n    }\n    return this.container;\n  };\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n    return new Promise(function (resolve, reject) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        requestAnimationFrame(function () {\n          var size = [this.context.canvas.width, this.context.canvas.height];\n          (0, _transform.apply)(this.pixelTransform, size);\n          var center = this.renderedCenter_;\n          var resolution = this.renderedResolution_;\n          var rotation = this.renderedRotation_;\n          var projection = this.renderedProjection_;\n          var extent = this.renderedExtent_;\n          var layer = this.getLayer();\n          var transforms = [];\n          var width = size[0] / 2;\n          var height = size[1] / 2;\n          transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, 0).slice());\n          var source = layer.getSource();\n          var projectionExtent = projection.getExtent();\n          if (source.getWrapX() && projection.canWrapX() && !(0, _extent.containsExtent)(projectionExtent, extent)) {\n            var startX = extent[0];\n            var worldWidth = (0, _extent.getWidth)(projectionExtent);\n            var world = 0;\n            var offsetX = void 0;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());\n              startX -= worldWidth;\n            }\n          }\n          this.hitDetectionImageData_ = (0, _hitdetect.createHitDetectionImageData)(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n          resolve((0, _hitdetect.hitDetect)(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        }.bind(this));\n      } else {\n        resolve((0, _hitdetect.hitDetect)(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n      }\n    }.bind(this));\n  };\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {\n    if (!this.replayGroup_) {\n      return undefined;\n    } else {\n      var resolution = frameState.viewState.resolution;\n      var rotation = frameState.viewState.rotation;\n      var layer_1 = this.getLayer();\n      /** @type {!Object<string, boolean>} */\n      var features_1 = {};\n      var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance,\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @return {?} Callback result.\n       */\n      function (feature) {\n        var key = (0, _util.getUid)(feature);\n        if (!(key in features_1)) {\n          features_1[key] = true;\n          return callback(feature, layer_1);\n        }\n      }, layer_1.getDeclutter() ? declutteredFeatures : null);\n      return result;\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n    var layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var vectorLayer = this.getLayer();\n    var vectorSource = vectorLayer.getSource();\n    var animating = frameState.viewHints[_ViewHint2.default.ANIMATING];\n    var interacting = frameState.viewHints[_ViewHint2.default.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (!this.dirty_ && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = _vector.defaultOrder;\n    }\n    var center = viewState.center.slice();\n    var extent = (0, _extent.buffer)(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var projectionExtent = viewState.projection.getExtent();\n    if (vectorSource.getWrapX() && viewState.projection.canWrapX() && !(0, _extent.containsExtent)(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = (0, _extent.getWidth)(projectionExtent);\n      var gutter = Math.max((0, _extent.getWidth)(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n      center[0] -= worldsAway * worldWidth;\n    }\n    if (!this.dirty_ && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && (0, _extent.containsExtent)(this.renderedExtent_, extent)) {\n      this.replayGroupChanged = false;\n      return true;\n    }\n    if (this.replayGroup_) {\n      this.replayGroup_.dispose();\n    }\n    this.replayGroup_ = null;\n    this.dirty_ = false;\n    var replayGroup = new _BuilderGroup2.default((0, _vector.getTolerance)(resolution, pixelRatio), extent, resolution, pixelRatio, vectorLayer.getDeclutter());\n    var userProjection = (0, _proj.getUserProjection)();\n    var userTransform;\n    if (userProjection) {\n      vectorSource.loadFeatures((0, _proj.toUserExtent)(extent, projection), resolution, userProjection);\n      userTransform = (0, _proj.getTransformFromProjections)(userProjection, projection);\n    } else {\n      vectorSource.loadFeatures(extent, resolution, projection);\n    }\n    var squaredTolerance = (0, _vector.getSquaredTolerance)(resolution, pixelRatio);\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    var render = function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform);\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n    var userExtent = (0, _proj.toUserExtent)(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    var features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    var replayGroupInstructions = replayGroup.finish();\n    var executorGroup = new _ExecutorGroup2.default(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = extent;\n    this.renderedRotation_ = viewState.rotation;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  };\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} opt_transform Transform from user to view projection.\n   * @return {boolean} `true` if an image is loading.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform) {\n    if (!styles) {\n      return false;\n    }\n    var loading = false;\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = (0, _vector.renderFeature)(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform) || loading;\n      }\n    } else {\n      loading = (0, _vector.renderFeature)(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform);\n    }\n    return loading;\n  };\n  return CanvasVectorLayerRenderer;\n}(_Layer2.default);\nexports.default = CanvasVectorLayerRenderer;\n//# sourceMappingURL=VectorLayer.js.map"},"hash":"a32d66af1dc8c8f760702c599dabc753"}