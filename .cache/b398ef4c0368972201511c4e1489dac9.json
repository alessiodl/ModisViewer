{"dependencies":[{"name":"./common.js","loc":{"line":17,"column":36}},{"name":"../Image.js","loc":{"line":18,"column":25}},{"name":"../asserts.js","loc":{"line":19,"column":23}},{"name":"../events/EventType.js","loc":{"line":20,"column":22}},{"name":"../extent.js","loc":{"line":21,"column":82}},{"name":"../obj.js","loc":{"line":22,"column":23}},{"name":"../proj.js","loc":{"line":23,"column":48}},{"name":"../reproj.js","loc":{"line":24,"column":42}},{"name":"./Image.js","loc":{"line":25,"column":54}},{"name":"./WMSServerType.js","loc":{"line":26,"column":26}},{"name":"../string.js","loc":{"line":27,"column":32}},{"name":"../uri.js","loc":{"line":28,"column":29}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _common = require(\"./common.js\");\n\nvar _Image = require(\"../Image.js\");\n\nvar _Image2 = _interopRequireDefault(_Image);\n\nvar _asserts = require(\"../asserts.js\");\n\nvar _EventType = require(\"../events/EventType.js\");\n\nvar _EventType2 = _interopRequireDefault(_EventType);\n\nvar _extent = require(\"../extent.js\");\n\nvar _obj = require(\"../obj.js\");\n\nvar _proj = require(\"../proj.js\");\n\nvar _reproj = require(\"../reproj.js\");\n\nvar _Image3 = require(\"./Image.js\");\n\nvar _Image4 = _interopRequireDefault(_Image3);\n\nvar _WMSServerType = require(\"./WMSServerType.js\");\n\nvar _WMSServerType2 = _interopRequireDefault(_WMSServerType);\n\nvar _string = require(\"../string.js\");\n\nvar _uri = require(\"../uri.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/source/ImageWMS\n */\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageWMS = /** @class */function (_super) {\n  __extends(ImageWMS, _super);\n  /**\n   * @param {Options=} [opt_options] ImageWMS options.\n   */\n  function ImageWMS(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : _Image3.defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.v13_ = true;\n    _this.updateV13_();\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    _this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  ImageWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    var projectionObj = (0, _proj.get)(projection);\n    var sourceProjectionObj = this.getProjection();\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = (0, _reproj.calculateSourceResolution)(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = (0, _proj.transform)(coordinate, projectionObj, sourceProjectionObj);\n    }\n    var extent = (0, _extent.getForViewAndSize)(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': _common.DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    (0, _obj.assign)(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  ImageWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': _common.DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var dpi = 25.4 / 0.28;\n      var inchesPerMeter = 39.37;\n      baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;\n    }\n    (0, _obj.assign)(baseParams, params);\n    return (0, _uri.appendParams)( /** @type {string} */this.url_, baseParams);\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  ImageWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @inheritDoc\n   */\n  ImageWMS.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    resolution = this.findNearestResolution(resolution);\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n    var imageResolution = resolution / pixelRatio;\n    var center = (0, _extent.getCenter)(extent);\n    var viewWidth = Math.ceil((0, _extent.getWidth)(extent) / imageResolution);\n    var viewHeight = Math.ceil((0, _extent.getHeight)(extent) / imageResolution);\n    var viewExtent = (0, _extent.getForViewAndSize)(center, imageResolution, 0, [viewWidth, viewHeight]);\n    var requestWidth = Math.ceil(this.ratio_ * (0, _extent.getWidth)(extent) / imageResolution);\n    var requestHeight = Math.ceil(this.ratio_ * (0, _extent.getHeight)(extent) / imageResolution);\n    var requestExtent = (0, _extent.getForViewAndSize)(center, imageResolution, 0, [requestWidth, requestHeight]);\n    var image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && (0, _extent.containsExtent)(image.getExtent(), viewExtent)) {\n      return image;\n    }\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': _common.DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    (0, _obj.assign)(params, this.params_);\n    this.imageSize_[0] = Math.round((0, _extent.getWidth)(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round((0, _extent.getHeight)(requestExtent) / imageResolution);\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new _Image2.default(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(_EventType2.default.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  ImageWMS.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  ImageWMS.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    (0, _asserts.assert)(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case _WMSServerType2.default.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case _WMSServerType2.default.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case _WMSServerType2.default.CARMENTA_SERVER:\n        case _WMSServerType2.default.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          (0, _asserts.assert)(false, 8); // Unknown `serverType` configured\n          break;\n      }\n    }\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n    return (0, _uri.appendParams)( /** @type {string} */this.url_, params);\n  };\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  ImageWMS.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  ImageWMS.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  ImageWMS.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  ImageWMS.prototype.updateParams = function (params) {\n    (0, _obj.assign)(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  ImageWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || _common.DEFAULT_WMS_VERSION;\n    this.v13_ = (0, _string.compareVersions)(version, '1.3') >= 0;\n  };\n  return ImageWMS;\n}(_Image4.default);\nexports.default = ImageWMS;\n//# sourceMappingURL=ImageWMS.js.map"},"hash":"7f8c7b87e7e5972f9604d1ce83a9157c"}