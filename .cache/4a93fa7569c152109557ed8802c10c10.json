{"dependencies":[{"name":"../rotationconstraint.js","loc":{"line":17,"column":24}},{"name":"../events/condition.js","loc":{"line":18,"column":63}},{"name":"../functions.js","loc":{"line":19,"column":22}},{"name":"./Pointer.js","loc":{"line":20,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _rotationconstraint = require(\"../rotationconstraint.js\");\n\nvar _condition = require(\"../events/condition.js\");\n\nvar _functions = require(\"../functions.js\");\n\nvar _Pointer = require(\"./Pointer.js\");\n\nvar _Pointer2 = _interopRequireDefault(_Pointer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragRotate\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nvar DragRotate = /** @class */function (_super) {\n  __extends(DragRotate, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function DragRotate(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      stopDown: _functions.FALSE\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : _condition.altShiftKeysOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n  DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!(0, _condition.mouseOnly)(mapBrowserEvent)) {\n      return;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === _rotationconstraint.disable) {\n      return;\n    }\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  };\n  /**\n   * @inheritDoc\n   */\n  DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (!(0, _condition.mouseOnly)(mapBrowserEvent)) {\n      return true;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n  DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (!(0, _condition.mouseOnly)(mapBrowserEvent)) {\n      return false;\n    }\n    if ((0, _condition.mouseActionButton)(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragRotate;\n}(_Pointer2.default);\nexports.default = DragRotate;\n//# sourceMappingURL=DragRotate.js.map"},"hash":"7be65e4cb145bdb77af90b5ca405dd2d"}