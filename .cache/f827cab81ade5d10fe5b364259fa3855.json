{"dependencies":[{"name":"../ImageCanvas.js","loc":{"line":17,"column":24}},{"name":"../extent.js","loc":{"line":18,"column":69}},{"name":"./Image.js","loc":{"line":19,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ImageCanvas = require(\"../ImageCanvas.js\");\n\nvar _ImageCanvas2 = _interopRequireDefault(_ImageCanvas);\n\nvar _extent = require(\"../extent.js\");\n\nvar _Image = require(\"./Image.js\");\n\nvar _Image2 = _interopRequireDefault(_Image);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/source/ImageCanvas\n */\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and\n * {@link module:ol/proj/Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: `{import(\"../extent.js\").Extent}` the\n * image extent, `{number}` the image resolution, `{number}` the device pixel\n * ratio, `{import(\"../size.js\").Size}` the image size, and `{import(\"../proj/Projection.js\").Projection}` the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./State.js\").default} [state] Source state.\n */\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nvar ImageCanvasSource = /** @class */function (_super) {\n  __extends(ImageCanvasSource, _super);\n  /**\n   * @param {Options=} opt_options ImageCanvas options.\n   */\n  function ImageCanvasSource(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    }) || this;\n    /**\n    * @private\n    * @type {FunctionType}\n    */\n    _this.canvasFunction_ = options.canvasFunction;\n    /**\n    * @private\n    * @type {import(\"../ImageCanvas.js\").default}\n    */\n    _this.canvas_ = null;\n    /**\n    * @private\n    * @type {number}\n    */\n    _this.renderedRevision_ = 0;\n    /**\n    * @private\n    * @type {number}\n    */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n  * @inheritDoc\n  */\n  ImageCanvasSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    var canvas = this.canvas_;\n    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && (0, _extent.containsExtent)(canvas.getExtent(), extent)) {\n      return canvas;\n    }\n    extent = extent.slice();\n    (0, _extent.scaleFromCenter)(extent, this.ratio_);\n    var width = (0, _extent.getWidth)(extent) / resolution;\n    var height = (0, _extent.getHeight)(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n    var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n    if (canvasElement) {\n      canvas = new _ImageCanvas2.default(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n    return canvas;\n  };\n  return ImageCanvasSource;\n}(_Image2.default);\nexports.default = ImageCanvasSource;\n//# sourceMappingURL=ImageCanvas.js.map"},"hash":"9b88b94470b9a75f0f350564931bee1c"}