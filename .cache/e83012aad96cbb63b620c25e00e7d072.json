{"dependencies":[{"name":"../array.js","loc":{"line":17,"column":23}},{"name":"../extent.js","loc":{"line":18,"column":53}},{"name":"./GeometryType.js","loc":{"line":19,"column":25}},{"name":"./Point.js","loc":{"line":20,"column":18}},{"name":"./SimpleGeometry.js","loc":{"line":21,"column":27}},{"name":"./flat/deflate.js","loc":{"line":22,"column":35}},{"name":"./flat/inflate.js","loc":{"line":23,"column":35}},{"name":"../math.js","loc":{"line":24,"column":45}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _array = require(\"../array.js\");\n\nvar _extent = require(\"../extent.js\");\n\nvar _GeometryType = require(\"./GeometryType.js\");\n\nvar _GeometryType2 = _interopRequireDefault(_GeometryType);\n\nvar _Point = require(\"./Point.js\");\n\nvar _Point2 = _interopRequireDefault(_Point);\n\nvar _SimpleGeometry = require(\"./SimpleGeometry.js\");\n\nvar _SimpleGeometry2 = _interopRequireDefault(_SimpleGeometry);\n\nvar _deflate = require(\"./flat/deflate.js\");\n\nvar _inflate = require(\"./flat/inflate.js\");\n\nvar _math = require(\"../math.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiPoint\n */\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /** @class */function (_super) {\n  __extends(MultiPoint, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  function MultiPoint(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n    } else {\n      _this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */coordinates, opt_layout);\n    }\n    return _this;\n  }\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  MultiPoint.prototype.appendPoint = function (point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      (0, _array.extend)(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.clone = function () {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    return multiPoint;\n  };\n  /**\n   * @inheritDoc\n   */\n  MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < (0, _extent.closestSquaredDistanceXY)(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = (0, _math.squaredDistance)(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  };\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.getCoordinates = function () {\n    return (0, _inflate.inflateCoordinates)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  MultiPoint.prototype.getPoint = function (index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new _Point2.default(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  MultiPoint.prototype.getPoints = function () {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array<Point>} */\n    var points = [];\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new _Point2.default(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPoint.prototype.getType = function () {\n    return _GeometryType2.default.MULTI_POINT;\n  };\n  /**\n   * @inheritDoc\n   * @api\n   */\n  MultiPoint.prototype.intersectsExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      if ((0, _extent.containsXY)(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = (0, _deflate.deflateCoordinates)(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return MultiPoint;\n}(_SimpleGeometry2.default);\nexports.default = MultiPoint;\n//# sourceMappingURL=MultiPoint.js.map"},"hash":"c02abb3039db280561d93c221f6b4008"}