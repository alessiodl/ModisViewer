{"dependencies":[{"name":"../util.js","loc":{"line":17,"column":25}},{"name":"../Object.js","loc":{"line":18,"column":23}},{"name":"./Property.js","loc":{"line":19,"column":26}},{"name":"../math.js","loc":{"line":20,"column":22}},{"name":"../obj.js","loc":{"line":21,"column":23}},{"name":"../asserts.js","loc":{"line":22,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require(\"../util.js\");\n\nvar _Object = require(\"../Object.js\");\n\nvar _Object2 = _interopRequireDefault(_Object);\n\nvar _Property = require(\"./Property.js\");\n\nvar _Property2 = _interopRequireDefault(_Property);\n\nvar _math = require(\"../math.js\");\n\nvar _obj = require(\"../obj.js\");\n\nvar _asserts = require(\"../asserts.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Base\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nvar BaseLayer = /** @class */function (_super) {\n  __extends(BaseLayer, _super);\n  /**\n   * @param {Options} options Layer options.\n   */\n  function BaseLayer(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = (0, _obj.assign)({}, options);\n    properties[_Property2.default.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    (0, _asserts.assert)(typeof properties[_Property2.default.OPACITY] === 'number', 64); // Layer opacity must be a number\n    properties[_Property2.default.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[_Property2.default.Z_INDEX] = options.zIndex;\n    properties[_Property2.default.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[_Property2.default.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    properties[_Property2.default.MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[_Property2.default.MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n    /**\n     * @type {string}\n     * @private\n     */\n    _this.className_ = properties.className !== undefined ? options.className : 'ol-layer';\n    delete properties.className;\n    _this.setProperties(properties);\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    _this.state_ = null;\n    return _this;\n  }\n  /**\n   * @return {string} CSS class name.\n   */\n  BaseLayer.prototype.getClassName = function () {\n    return this.className_;\n  };\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean=} opt_managed Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  BaseLayer.prototype.getLayerState = function (opt_managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    var state = this.state_ || /** @type {?} */{\n      layer: this,\n      managed: opt_managed === undefined ? true : opt_managed\n    };\n    var zIndex = this.getZIndex();\n    state.opacity = (0, _math.clamp)(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.sourceState = this.getSourceState();\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex !== undefined ? zIndex : state.managed === false ? Infinity : 0;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n    return state;\n  };\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  BaseLayer.prototype.getLayersArray = function (opt_array) {\n    return (0, _util.abstract)();\n  };\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  BaseLayer.prototype.getLayerStatesArray = function (opt_states) {\n    return (0, _util.abstract)();\n  };\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getExtent = function () {\n    return (\n      /** @type {import(\"../extent.js\").Extent|undefined} */this.get(_Property2.default.EXTENT)\n    );\n  };\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMaxResolution = function () {\n    return (/** @type {number} */this.get(_Property2.default.MAX_RESOLUTION)\n    );\n  };\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMinResolution = function () {\n    return (/** @type {number} */this.get(_Property2.default.MIN_RESOLUTION)\n    );\n  };\n  /**\n   * Return the minimum zoom level of the layer.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMinZoom = function () {\n    return (/** @type {number} */this.get(_Property2.default.MIN_ZOOM)\n    );\n  };\n  /**\n   * Return the maximum zoom level of the layer.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMaxZoom = function () {\n    return (/** @type {number} */this.get(_Property2.default.MAX_ZOOM)\n    );\n  };\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getOpacity = function () {\n    return (/** @type {number} */this.get(_Property2.default.OPACITY)\n    );\n  };\n  /**\n   * @abstract\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  BaseLayer.prototype.getSourceState = function () {\n    return (0, _util.abstract)();\n  };\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getVisible = function () {\n    return (/** @type {boolean} */this.get(_Property2.default.VISIBLE)\n    );\n  };\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getZIndex = function () {\n    return (/** @type {number} */this.get(_Property2.default.Z_INDEX)\n    );\n  };\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setExtent = function (extent) {\n    this.set(_Property2.default.EXTENT, extent);\n  };\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMaxResolution = function (maxResolution) {\n    this.set(_Property2.default.MAX_RESOLUTION, maxResolution);\n  };\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMinResolution = function (minResolution) {\n    this.set(_Property2.default.MIN_RESOLUTION, minResolution);\n  };\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMaxZoom = function (maxZoom) {\n    this.set(_Property2.default.MAX_ZOOM, maxZoom);\n  };\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMinZoom = function (minZoom) {\n    this.set(_Property2.default.MIN_ZOOM, minZoom);\n  };\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setOpacity = function (opacity) {\n    (0, _asserts.assert)(typeof opacity === 'number', 64); // Layer opacity must be a number\n    this.set(_Property2.default.OPACITY, opacity);\n  };\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setVisible = function (visible) {\n    this.set(_Property2.default.VISIBLE, visible);\n  };\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setZIndex = function (zindex) {\n    this.set(_Property2.default.Z_INDEX, zindex);\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseLayer.prototype.disposeInternal = function () {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    _super.prototype.disposeInternal.call(this);\n  };\n  return BaseLayer;\n}(_Object2.default);\nexports.default = BaseLayer;\n//# sourceMappingURL=Base.js.map"},"hash":"5b2bb857c6c5d68ce238f6a6140013d8"}